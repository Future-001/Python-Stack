"""
                操作系统基础：一天
                进程：2天
                线程：2天
                协程：1天
=========================================  今日大纲 =========================================
发展史：
        人机矛盾，纸带工作：cpu 不能100%工作
        纸带读取的慢 ====> 高速磁带 ===> 电子管
        I/O操作：====>  都是相对内存来说的,从内存中读取叫输出，存到内存叫输入
            输入输出操作
            输入：键盘\input\read\recv
            输出：显示器 打印机  播放音乐 \print\write\send
            文件操作： 读read  写
            网络操作：  send recv

CPU 工作： 进行计算，（堆内存中的数据进行操作的时候）
CPU 不工作： 进行IO操作的时候


程序执行方式：
    顺序执行=====>  并行执行，流水线式执行（多道操作系统,一个程序遇到IO就将CPU切换给别人)
        由于IO不占用cpu,当一个程序执行IO的时候，CPU不会空闲下来，而是可以去执行另一个程序，等另一个程序IO时，又可以切换回来执行前一个程序。
                单纯的切换会不会占用时间？  会，会记录下自己所处的位置，才能准确的切换回来（进程的内存需要隔离）
                        但是多道操作系统整理原理还是节省了时间，提高了CPU的执行效率
                        时空复用的概念

单核CPU；===> 分时操作系统：将时间分成很小很小的片段，每一个时间段都是一个时间片（专业术语) ,
            每个进程轮流执行一个时间片的时间，===>  时间片的轮转

                    进程1：全是计算，没有IO，CPU一直在工作
                            先来先服务  FCFS
                    进程2：5min全是计算，没有IO
                            短作业先执行   短作业优先
                    1min后进程3来了：同样是5min全是计算，没有IO

        分时操作系统没有提高CPU的利用效率，但是提高了用户体验

实时操作系统：
        要求计算机尽快处理系统的进程，不能切换别的进程，只能先处理当前进程。

分布式：
        操作系统
        将一个任务分为多个任务进行处理，加快计算
            celery python这个模块可以进行分布式开发

        操作系统作用；进程调动操作系统，操作硬件完成某种功能
                    隐藏了硬件接口，将应用程序对硬件资源的需求有序化
"""
